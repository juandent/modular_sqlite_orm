module;

#include "config.h"
#include "cxx_core_features.h"

export module sqlite_orm;

#if 1		//version inicial
export import type_traits;
export import error_code;
export import type_printer;
export import collate_argument;
export import constraints;
export import type_is_nullable;
export import operators;
export import column;
export import field_printer;
export import conditions;
export import alias;
export import core_functions;
export import select_constraints;
export import table_info;
export import triggers;
export import statement_finalizer;
export import arithmetic_tag;
export import pointer_value;
export import statement_binder;
export import row_extractor;
export import sync_schema_result;
export import index;
export import rowid;
export import table;
export import storage_impl;
export import default_value_extractor;
export import storage;
export import get_prepared_statement;
export import carray;
export import sqlite_schema_table;
export import dbstat;
export import interface_definitions;
#else
/////////// in order:
export import cxx_type_traits_polyfill;
export import type_traits;
export import alias_traits;
export import table_type_of;
export import alias;
export import arithmetic_tag;
export import xdestroy_handling;
export import pointer_value;
export import error_code;
export import is_std_ptr;
export import journal_mode;
export import row_extractor;
export import arg_values;
export import member_traits;
export import cxx_functional_polyfill;
export import tuple_iteration;
export import is_base_of_template;
export import collate_argument;
export import optional_container;
export import serializer_context;
export import tags;
export import type_printer;
export import literal;
export import same_or_void;
export import mpl;
export import tuple_traits;
export import index_sequence_util;
export import tuple_filter;
export import constraints;
export import serialize_result_type;
export import operators;
export import expression;
export import conditions;
export import into;
export import core_functions;
export import column_pointer;
export import where;
export import group_by;
export import select_constraints;
export import connection_holder;
export import values;
export import mapped_type_proxy;
export import upsert_clause;
export import storage_lookup;
export import rowid;
export import table_name_collector;
export import set;
export import prepared_statement;
export import function;
export import excluded;
export import exists;
export import ast_iterator;
export import backup;
export import carray;
export import type_is_nullable;
export import column;
export import static_magic;
export import default_value_extractor;
export import column_definitions;
export import util;
export import typed_comparator;
export import table_info;
export import table;
export import column_names_getter;
export import tuple_fy;
export import tuple_transformer;
export import storage_traits;
export import column_result;
export import dbstat;
export import expression_object_type;
export import field_printer;
export import node_tuple;
export import statement_binder;
export import get_prepared_statement;
export import indexed_column;
export import index;
export import table_definitions;
export import sqlite_schema_table;
export import serializing_util;
export import object_from_column_builder;
export import mapped_row_extractor;
export import row_extractor_builder;
export import sync_schema_result;
export import storage_impl;
export import statement_finalizer;
export import iterator;
export import view;
export import pragma;
export import limit_accessor;
export import transaction_guard;
export import values_to_tuple;
export import storage_base;
export import order_by_serializer;
export import triggers;
export import statement_serializer;
export import storage;
export import storage_definitions;
export import interface_definitions;
#endif

// #include "../../dev/functional/start_macros.h"
// // though each header is required to include everything it needs
// // we include the configuration and all underlying c++ core features in order to make it universally available
// #include "../../dev/functional/config.h"
// #include "../../dev/type_traits.h"
// #include "../../dev/error_code.h"
// #include "../../dev/type_printer.h"
// #include "../../dev/collate_argument.h"
// #include "../../dev/constraints.h"
// #include "../../dev/type_is_nullable.h"
// #include "../../dev/operators.h"
// #include "../../dev/column.h"
// #include "../../dev/field_printer.h"
// #include "../../dev/conditions.h"
// #include "../../dev/alias.h"
// #include "../../dev/core_functions.h"
// #include "../../dev/select_constraints.h"
// #include "../../dev/table_info.h"
// #include "../../dev/triggers.h"
// #include "../../dev/statement_finalizer.h"
// #include "../../dev/arithmetic_tag.h"
// #include "../../dev/pointer_value.h"
// #include "../../dev/statement_binder.h"
// #include "../../dev/row_extractor.h"
// #include "../../dev/sync_schema_result.h"
// #include "../../dev/index.h"
// #include "../../dev/rowid.h"
// #include "../../dev/table.h"
// #include "../../dev/storage_impl.h"
// #include "../../dev/default_value_extractor.h"
// #include "../../dev/storage.h"
// #include "../../dev/get_prepared_statement.h"
// #include "../../dev/carray.h"
// #include "../../dev/sqlite_schema_table.h"
// #include "../../dev/eponymous_vtabs/dbstat.h"
// #include "../../dev/interface_definitions.h"
// #include "../../dev/functional/finish_macros.h"
